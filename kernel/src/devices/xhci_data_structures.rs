#[repr(C, packed)]
#[derive(Debug, Clone)]
/// See section 6.2.2 of xHCI specs
struct slot_contex {
    offset_0: u32,
    offset_1: u32,
    offset_2: u32,
    offset_3: u32,
    offset_4: u32,
    offset_5: u32,
    offset_6: u32,
    offset_7: u32
}

impl slot_contex {
    /// Retrieves the route string from the slot contex.
    /// The route string is only 20 bits wide and is used
    /// by hubs to route packets.
    fn get_route_string(&self) -> u32 {
        // TODO figure out if this feild needs a set method
        self.offset_0 & 0xFFFFF
    }

    /// Retrieves the speed from the slot context.
    /// This field is 4 bits wide indicates the speed of the device.
    /// This field is deprecated and should be reserved.
    fn get_speed(&self) -> u32 {
        (self.offset_0 >> 20) & 0xF 
    }

    /// Retrieves the multi-tt bit from the slot context.
    /// This bit is 1 if multiple transaction translators (TTs) are needed.
    fn get_MTT(&self) -> u32 {
        (self.offset_0 >> 25) & 1
    }

    /// Sets the MTT field to value.
    /// value is expected to be one bit.
    fn set_MTT(&mut self, value: u32) {
        self.offset_0 |= value << 25;
    }

    /// Retrieves the hub bit from the slot context.
    /// This bit is 1 if this device is a USB hub, 0 for a USB function.
    fn get_hub(&self) -> u32 {
        (self.offset_0 >> 26) & 1
    }

    /// Sets the hub field to value.
    /// value is expected to be one bit.
    fn set_hub(&mut self, value: u32) {
        self.offset_0 |= value << 26;
    }

    /// Retrieves the context entries from the slot context.
    /// This field is only 5 bits wide and it identifies the index of the last
    /// valid endpoint context within the parent device context structure.
    fn get_context_entries(&self) -> u32 {
        (self.offset_0 >> 27) & 0x1F
    }

    /// Sets the context entries field to value.
    /// value is expected to be 5 bits.
    /// This method should only be used if this is an input context entries.
    fn set_context_entries(&mut self, value: u32) {
        self.offset_0 |= value << 27;
    }

    /// Retrieves the max exit latency from the slot context.
    /// This field is 16 bits wide. The value returned is the worst case time
    /// to wake up all the links in the path to the device in microseconds.
    fn get_max_exit_latency(&self) -> u32 {
        self.offset_1 & 0xFFFF
    }

    /// Retrieves the root hub port number from the slot context.
    /// This field is only 8 bits wide and identifies the root hub port number
    /// used to access the device.
    fn get_root_hub_port(&self) -> u32 {
        (self.offset_1 >> 16) & 0xFF
    }

    /// Retrieves the number of ports from the slot context.
    /// This field is only 8 bits wide. If this devices is a hub, the value returned
    /// is the number of downstream ports supported on this device
    fn get_num_ports(&self) -> u32 {
        (self.offset_1 >> 24) & 0xFF
    }

    /// Sets the number of ports field to value.
    /// value is expected to be 8 bits.
    fn set_num_ports(&mut self, value: u32) {
        self.offset_1 |= value << 24;
    }

    /// Retrieves the parent hub slot id from the slot context.
    /// This field is only 8 bits wide and contains the slot id of the parent hub.
    fn get_parent_hub_slot(&self) -> u32 {
        self.offset_2 & 0xFF
    }

    /// Retrieves the parent port number from the slot context.
    /// This field is only 8 bits wide and contains the port number of the parent hub.
    fn get_parent_port(&self) -> u32 {
        (self.offset_2 >> 8) & 0xFF
    }

    /// Retrieves the TT think time from the slot context.
    /// This field is only 2 bits wide and contains the time that the TT of the hub
    /// requires to proceed to the next transaction.
    fn get_think_time(&self) -> u32 {
        (self.offset_2 >> 16) & 0x3
    }

    /// Retrieves the interrupter target from the slot context.
    /// This field is only 10 bits wide and defines the index of the interrupter that
    /// receives the events generated by this slot.
    fn get_interrupter_target(&self) -> u32 {
        (self.offset_2 >> 22) & 0x3FF
    }

    /// Retrieves the USB device address from the slot context.
    /// This field is only 8 bits wide and contains the address assigned to the USB device
    /// by the xHC.
    fn get_device_address(&self) -> u32 {
        self.offset_3 & 0xFF
    }

    /// Retrieves the slot state from the slot context.
    /// This field is only 5 bits wide. This field is updated by the xHC with the
    /// device slot transitions from one state to another.
    fn get_slot_state(&self) -> u32 {
        (self.offset_3 >> 27) & 0x1F
    }
}